3 sayfa ve "canlÄ± veri" Ã§ekeceÄŸiz;

1. paket yÃ¼klemelerini yapÄ±yoruz.
   ğŸ‘‰ https://reactnavigation.org/docs/getting-started (navigation iÃ§in)
   ğŸ‘‰ https://github.com/axios/axios (API)
        -> npm install axios 
    
2. "Router", 3 adet temel yapÄ±da component(cityList, RestaurantList, RestaurantDetail) ve 1 index oluÅŸturuyoruz.

3. Router;
    import React from 'react';
    import { View, Text } from 'react-native';
    import { NavigationContainer } from '@react-navigation/native';
    import { createStackNavigator } from '@react-navigation/stack';

    const Router = () => {
        return (
            <NavigationContainer>
                <Stack.Navigator>
                    
                    <Stack.Screen/>
                    
                    <Stack.Screen/>
                    
                    <Stack.Screen/>
                
                </Stack.Navigator>
            </NavigationContainer>
        );
    };

    export default Router;

4. 3 tane sayfamÄ±zÄ±n temel yapÄ±larÄ±nÄ± oluÅŸturuyoruz;
    ex: RestaurantList
    import React from 'react';
    import { SafeAreaView, View, Text, FlatList } from 'react-native';

    const RestaurantList = (props) => {
        return (
            <SafeAreaView>
                <View>
                    <Text>Restaurant List</Text>
                </View>
            </SafeAreaView>
        )
    }

    export { RestaurantList };  

5. index oluÅŸturalÄ±m;
    export * from './CityList';
    export * from './RestaurantDetail';
    export * from './RestaurantList';


6. Router'a Stack yapÄ±sÄ±nÄ± kurup sayfalarÄ± tanÄ±mlÄ±yoruz;
    const Stack = createStackNavigator(); // createStackNavigator native-component'Ä±nÄ± kendi belirlediÄŸimi "Stack" deÄŸiÅŸkenine atÄ±yoruz

    import { CityList, RestaurantDetail, RestaurantList } from './pages'; //oluÅŸturduÄŸumuz sayfalarÄ± index'ten Ã§aÄŸÄ±rÄ±yoruz.

    ... 
                <Stack.Screen  //Stack'i yeni sayfalar(Screen'lar) oluÅŸturmak iÃ§in kullanÄ±yoruz.
                    name="Cities"  //Stack.Screen 2 param alÄ±r. *name, *component
                    component={CityList}  //hangi component'a ait oldugunu gÃ¶steriyor.
                    options={{ headerShown: false }} 
                />
                <Stack.Screen
                    name="Restaurants"
                    component={RestaurantList}
                    options={{ headerShown: false }}
                />
                <Stack.Screen
                    name="Details"
                    component={RestaurantDetail}
                    options={{ headerShown: false }}
                />
    ...
    
7. sayfalarÄ± hazÄ±rlayalÄ±m. Ã¶nce "CityList"

8. CityList;
    import axios from 'axios'; //API Ã§ekeceÄŸiz 
    import React, { useState, useEffect } from 'react'; //useState->Ã§ektiÄŸimiz verileri listede tutacaÄŸÄ±z.  useEffect->uygulama aÃ§Ä±lÄ±r aÃ§Ä±lmaz ilk Ã§alÄ±ÅŸacak fonk.
    import { SafeAreaView, View, Text, FlatList } from 'react-native';


    const CityList = (props) => {
        const [cityList, setCityList] = useState([]); // 1. verileri tutacaÄŸÄ±mÄ±z cityList'i oluÅŸturalÄ±m

        const fetchCityData = async () => {   //2. fetchCityData fonk ile verileri async ve await(verilerin gelmesini bekleyerek) olarak Ã§ekeceÄŸiz
            const { data } = await axios.get("https://opentable.herokuapp.com/api/cities") //6. verileri "response.data" diyerek de alabilirdik. fakat biz parÃ§alayarrak aldÄ±k.
            console.log(data); //4. Ã§ekeceÄŸiz veriler kontrol ettiÄŸimizde "data" nesnesinin geldiÄŸini gÃ¶rdÃ¼k. 
            setCityList(data.cities); //5. "data" bize  verileri 'count' ve 'cities' olarak gÃ¶nderiyor.
        }

        useEffect(() => {    //3. veri Ã§aÄŸÄ±rma iÅŸlemini hemen uygulama baÅŸladÄ±ÄŸÄ±nda yapmak iÃ§in
            fetchCityData();
        }, [])

        const renderCities = ({ item }) => <Text>{item}</Text> 
        //9. yeni bir deÄŸiÅŸken ile fonk tanÄ±mlÄ±yoruz. buraya aÅŸaÄŸÄ±da FlatList ile gÃ¶sterilecek ve 
        yukarÄ±dan axios ile Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±z "data.cities" ve gelen item'Ä±n propertileirni yazÄ±yoruz.
        bu Ã¶rnek Ã¶zelinde data'nÄ±n sadece cities nesnesi olduÄŸu iÃ§in ve onu yukarÄ±da Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±z iÃ§in
        sadece {item} yazÄ±yoruz

        return (
            <SafeAreaView>
                <View>
                    <FlatList //7. Ã§ektiÄŸimiz listeyi FlatList ile gÃ¶steriyoruz. FlatList 3 prop alÄ±yor. 
                        keyExtractor={(_, index) => index.toString()} 
                        data={cityList} //8. datayÄ± "useState" ile oluÅŸturduÄŸumuz deÄŸiÅŸkenden 
                        renderItem={renderCities} //10. component lerimizi render etmek iÃ§in kullanacaÄŸÄ±z 
                    />
                </View>
            </SafeAreaView>
            )
        }

     export { CityList };

9. ÅŸehirlerimizi componentlar Ã¼zerinden gÃ¶stereceÄŸimiz iÃ§in "component" klasÃ¶rÃ¼nÃ¼ iÃ§ine de 
    "CityItem.js" i  oluÅŸturuyoruz. ÅŸehirlerimizi listelemek iÃ§in kullanacaÄŸÄ±z.

10. CityItem;
    import React from 'react';
    import { TouchableOpacity, Text } from 'react-native';

    const CityItem = (props) => {
        return (
            <TouchableOpacity>
                <Text>{props.CityName}</Text> //1. bu prop ile buadan yakalayacaÄŸÄ±z.
            </TouchableOpacity>

        )
    }

    export { CityItem };

11. CityItem'Ä± export edebilmek iÃ§in aynÄ± klasÃ¶re "index.js" oluÅŸturalÄ±m.
    export * from './CityItem';

12. CityList;
    import {CityItem} from '../components';

    ğŸ‘‰const renderCities = ({ item }) => <Text>{item}</Text> 
    // deÄŸiÅŸtiriyoruz. artÄ±k yeni ve style verdiÄŸimiz yeni bir component'dan aldÄ±ÄŸÄ±mÄ±z listeyi 
        ekrana yansÄ±tacaÄŸÄ±z
    ğŸ‘‰const renderCities = ({ item }) => <CityItem cityName={item}/> 
    //yukarÄ±da oluÅŸturduÄŸumuz cityName prop'u ile Ã§aÄŸÄ±rÄ±yoruz. artÄ±k listemiz Touchable oldu.

13. CityItem'a biraz style verelim;
    ...
    return (
        <TouchableOpacity style={styles.container}>
            <Text style={styles.text}>{props.cityName}</Text>
        </TouchableOpacity>
            )}
    ...
    const styles = StyleSheet.create({
    container: {
        padding: 5,
        alignItems: 'center'
    },
    text: {
        fontSize: 20,
        fontWeight: '300'
    },
    })

14. component'a 1 adet searchbar oluÅŸturalÄ±m;
    import React from 'react';
    import { View, TextInput } from 'react-native';

    const SearchBar = (props) => {
        return (
            null
        )
    }

    export { SearchBar };

15. index'den export edelim;
    export * from './SearchBar';

16. cityList'e gidip FlatList'in hemen Ã¼zerinde SearchBar component'Ä±mÄ±zÄ± ekleyelim.;
    import { CityItem, SearchBar } from '../components';
    ....
    return (
        <SafeAreaView>
            <View>
                <SearchBar />
    ....

17. searchbar'a style verelim;
    ...
    const styles = StyleSheet.create({
    container: {
        backgroundColor: '#8d8d8d',
        margin: 5,
        padding: 1,
        borderRadius: 15,
    }
    })

18. ben burdan (SearchBar) prop alacam ve prop gÃ¶nderecÄŸim.;
    const SearchBar = (props) => {
        return (
            <View style={styles.container}>
                <TextInput
                    placeholder={props.placeholder} //1. placeholder'a girilecek default'u props ile gÃ¶ndereceÄŸim
                    onChangeText={(value) => props.onSearch(value)} 
                    //2. onChangeText ile girelen her harfi (value) onSearch'a yardÄ±mÄ±yla props'a atamasÄ±nÄ± yaptÄ±k
                />
            </View>
        )
    }

19. CityList->SearchBar'a geldik. propslara atamasÄ±nÄ± yaptÄ±ÄŸÄ±mÄ±z datalarÄ± kullanacaÄŸÄ±z;
     ...
     return (
        <SafeAreaView>
            <View>
                <SearchBar
                    placeholder="...Search a City..."
                    onSearch={(value) => consele.log(value)} //SearchBar->onSearch'dan gelen deÄŸiÅŸken
                />
    ...

20. 
    let originalList=[]

    const CityList = (props) => {
        ...

-----------

    function searchCity(search) {
        const filteredCities = originalList.filter(city=>{
            const text = search.toUpperCase();
            const cityName = city.toUpperCase();
            
            return cityName.indexOf(text) > -1;
        })
    }

-------------

    <SearchBar
                    placeholder="...Search a City..."
                    onSearch={(value) => searchCity(value)}
                />

--------------

    function searchCity(search) {
       ...
        })

        setCityList(filteredCities)
    }

---------------

     const fetchCityData = async () => {
        ...
        originalList=[...data.cities];
    }
    
 *************************************************************************************
 21.  listelediÄŸimiz ÅŸehirlerimize tÄ±klayÄ±nca diÄŸer sayfada gÃ¶rmek istiyorum.

 22. bunun iÃ§in CityItem'dan onPress metodunu kullanmam gerekiyor.

 23. CityItem;
    const CityItem = (props) => {
    return (
        <TouchableOpacity style={styles.container} onPress = {props.onSelect}> 
            //basÄ±lÄ±nca onSelect vasÄ±tasÄ±yla props'a deÄŸer yÃ¼klÃ¼yoruz.

24. CityList;
    ...
    const renderCities = ({ item }) => {
            return (
                <CityItem
                    cityName={item}
                    onSelect={() => props.navigation.navigate('Restaurants', { SelectedCity: item })}
                    ///CityItem'dan gelen onSelect'e basma eylemi burada diÄŸer sayfaya geÃ§memiz iÃ§in komut oluyor.
                        bu komut ile beraber "Restaurants" isimli (RestaurantList) sayfaya gidiyoruz.
                />
            )
        }
    ...

25. RestaurantList;
    ...
    const RestaurantList = (props) => {
        const { selectedCity } = props.route.params ///bu component'da seÃ§ilen ÅŸehir yeni sayfada gÃ¶rÃ¼ntÃ¼leniyor

        return(
    ...

26. ÅŸimdi bu ÅŸehirde bulunan Restaurantlara eriÅŸim saÄŸlamak istiyorum.

27.RestaurantList iÃ§inde API Ã§aÄŸÄ±rÄ±sÄ± yapmam gerekiyor.;
   RestaurantList;
        import axios from 'axios';
        ...
        const RestaurantList = (props) => {
        const { selectedCity } = props.route.params

        const fetchRestaurants = () => {
            axios.get(
                'http://opentable.herokuapp.com/api/restaurants',
                {
                    params: {
                        "city": selectedCity
                    }
                })
                .then(response => console.log(response)) //ÅŸimdilik console.log  ile bakÄ±yoruz.
                .catch(err => console.log(err))
        }

        useEffect(() => {
            fetchRestaurants();
        }, [])
        return (
        ...

28. RestaurantList'e Ã§ektiÄŸimiz restaurantlarÄ± belli bir yerde ( yeni bir component) gÃ¶stereceÄŸiz.

29. yeni component ismi "RestaurantItem";
    ...
    const RestaurantItem = (props) => {
        return (
            <TouchableOpacity style={styles.container}>
                <Image
                    style={styles.image}
                    source={{ uri: props.restaurant.image_url }}
                />
                <Text style={styles.name}>{props.restaurant.name}</Text>
            </TouchableOpacity>
        )
    }

    export { RestaurantItem };

    const styles = StyleSheet.create({
        container: {
            ...
        image: {
            ...
        name: {
            ...

30. maksadÄ±mÄ±z RestaurantItem'Ä± kullanarak restaurantlarÄ± "RestaurantList" ekranÄ±nda yansÄ±tacaÄŸÄ±z;
    yukarÄ±da fetchRestaurants (API) ile Ã§ektiÄŸimiz data iÃ§erisine bakÄ±yoruz(consele.log). burada data iÃ§erisinde 
    restaurants baÅŸlÄ±ÄŸÄ±nda bir bÃ¶lÃ¼m var. Bunu kullanacaÄŸÄ±z.
    RestaurantList;
    ...
    const RestaurantList = (props) => {
    const [restaurantList, setRestaurantList]= useState([]);
    ...
     const fetchRestaurants = () => {
        axios.get(
            'http://opentable.herokuapp.com/api/restaurants',
            {
                params: {
                    "city": selectedCity
                }
            })
            .then(response => {
                setRestaurantList(response.data.restaurants); //then iÃ§erisine bunu gÃ¶ndereceÄŸim
            })
    }
    .....

31. devam ediyoruz
    ...
    const [restaurantList, setRestaurantList] = useState([]); // useState ile listeyi tutuyoruz.
    ...
    return (
        <SafeAreaView>
            <View>
                <Text>{selectedCity}</Text>
                <FlatList  // burasÄ±nÄ± dolduruyoruz
                    keyExtractor={(_,index)=>index.toString()} //burayÄ± unutma!!
                    data={restaurantList}
                    renderItem={renderRestaurants}
                />
            </View>
        </SafeAreaView>
    )

32. render ile devam;
     const renderRestaurants = ({item}) =>{
        return(
            <RestaurantItem
                restaurant={item} //restauranItem'dan restaurant prop'u ile gÃ¶nderdik...
            />
        )
    }

*****************************************************************

33. sÄ±rada => "arama" butonu ekleyerek arama yapmak istiyoruz..

34. Ã¶nce RestaurantList'e "arama" component ekleyelim="searchbar";
    SearchBar'a gidip bakÄ±yorum iki tane prop'u var. 1. placeholder ve 2.onSearch
    
    RestaurantList;
    ...
    return (
        <SafeAreaView>
            <View>
                <View>
                    <Text style={{ margin: 5, fontWeight: 'bold', fontSize: 35, alignSelf: 'center' }}>{selectedCity}</Text>
                    <SearchBar placeholder=".....Search a Restaurant.... " /> // buraya searchbar'Ä± ekleyelim
    ...

35. aramayÄ± yapmak iÃ§in yukarÄ±da ayrÄ± bir liste oluÅŸturalÄ±m;
    ...

    let originalList = []; //deÄŸiÅŸken tanÄ±mlamasÄ±nÄ± yapÄ±yoruz.

    const RestaurantList = (props) => {
    ...

36. restaurant listeme fetchRestaurants'dan ulaÅŸtÄ±ÄŸÄ±m iÃ§in oraya gidiyoruz;
     ...
            .then(response => {
                setRestaurantList(response.data.restaurants);
                originalList = [...response.data.restaurants] // bÃ¶ylece yeni liste oluÅŸturuyoruz
            })
    ...

37. artÄ±k oluÅŸturduÄŸumuz listeye bir fonk. ile restaurant arayabiliriz...
    ...
    
    function searchRestaurant(search) {
        const filteredRestaurants = originalList.filter(restaurant => {
            const text = search.toUpperCase();
            const restaurantName = restaurant.name.toUpperCase();

            return restaurantName.indexOf(text) > -1;
        })

        setRestaurantList(filteredRestaurants);
    }

    return (
    ...

38. fonksiyonu searchbar'a ekliyoruz;
    ...
    <SearchBar 
            placeholder=".....Search a Restaurant.... " 
            onSearch={(value)=>searchRestaurant(value)} //buraya ekleyelim.
    />
    ...

39. karÅŸÄ±mÄ±za Ã§Ä±kan Restaurantlara tÄ±kladÄ±ÄŸÄ±mÄ±zda detaylarÄ±na ulaÅŸmak istiyoruz;
    RestaurantItem'a gidiyoruz ve bizim iÃ§in herbir restaurant ÅŸu an "TouchableOpacity" iÃ§erisinde. yani
    tÄ±klanabilir.

    RestaurantItem;
    ...
    const RestaurantItem = (props) => {
    return (
        <TouchableOpacity style={styles.container} onPress={props.onSelect}> //onSelect prop'u ile tetikliyoruz.
    ...

40. RestaurantList'e gidiyoruz;
    ...
    const renderRestaurants = ({ item }) => {
        return (
            <RestaurantItem
                restaurant={item} 
                onSelect={()=>props.navigation.navigate('Details',{selelectedRestaurant:item})} 
                //restauranItem'dan onSelect prop'u ile gÃ¶nderdik...
                ve buradan RestaurantDetail'e tÄ±kladÄ±ÄŸÄ±mÄ±z restaurant bilgileri gidecek (navigation)
            />
        )
    }
    ...

41. gÃ¶nderdidiÄŸimiz veriyi "RestaurantDetail" den Ã§ekelim.
    RestaurantDetail;
    ...
    const RestaurantDetail = (props) => {
        const { selectedRestaurant } = props.route.params
    ...

42. artÄ±k eriÅŸim saÄŸladÄ±ÄŸÄ±mÄ±z verileri gÃ¶stereceÄŸiz;
    return (
        <SafeAreaView style={{ flex: 1 }}>
            <View style={styles.container}>
                <Text style={styles.name}>{selectedRestaurant.name}</Text>
                <Image
                    style={styles.image}
                    source={{ uri: selectedRestaurant.image_url }}
                />
                <View style={styles.infoContainer}>
                    <Text style={styles.infoText}>{selectedRestaurant.address}</Text>
                </View>
                <View style={styles.infoContainer}>
                    <Text style={styles.infoText}>{selectedRestaurant.area}</Text>
                </View>
                <View style={styles.infoContainer}>
                    <Text style={styles.infoText}>{selectedRestaurant.phone}</Text>
                </View>
            </View>
        </SafeAreaView>
    )
}

export { RestaurantDetail };

const styles = StyleSheet.create({
    container: { flex: 1, padding: 5 },
    name: { fontWeight: '300', fontSize: 25 },
    image: { height: Dimensions.get('window').height / 3 },
    infoContainer: { backgroundColor: '#551753', margin: 5, borderRadius: 10 },
    infoText: { color: 'white', fontWeight: 'bold' },
})

---************--PROJECT FINISHED--**************--

Ã¶zet;
1. pages klasÃ¶rÃ¼nÃ¼ oluÅŸturduk
2. pages'e 3 file (kullanÄ±lacak 3 sayaf iÃ§in) oluÅŸturduk
    - CityList, - RestaurantDetail, - RestaurantList
3. CityList iÃ§ini dolduracak component'i hazÄ±rladÄ±k
    - CityItem
4. CityList;
    * fetchCityData_async/wait ile API veriyi Ã§ektik
    * filtreleme iÅŸlem, ile ÅŸehir taramasÄ± yaptÄ±k
    * renderCities ile tÄ±kladÄ±ÄŸÄ±mÄ±zda ilgili ÅŸehri datalarÄ± ile birlikte fÄ±rlatÄ±yoruz.
5. gÃ¶nderilen bu ÅŸehir ve iÃ§erisindeki restaurantlarÄ± RestaurantList'te yakaladÄ±k
    * const {selectedCity} = props.route.params; 
6. RestaurantList iÃ§erisinde tekrar "arama" yaptÄ±rdÄ±k
7. tÄ±kladÄ±ÄŸÄ±mÄ±z restaurant'Ä± navigation ile diÄŸer sayfaya gÃ¶nderdik
8. Details sayfasÄ±da ise genel veri gÃ¶sterdik...

:)

1. gelen price'a gÃ¶re restaurant' yÄ±ldÄ±z veya bir isaret eklemek
2. son sayfada "Details" bir buton (Go to Reserve) ekleyip ilgili restaurant'Ä±n web sayfasÄ±nÄ±n aÃ§Ä±lmasÄ±nÄ± istiyoruz
    data => mobile reserve url 


    
    