3 sayfa ve "canlÄ± veri" Ã§ekeceÄŸiz;

1. paket yÃ¼klemelerini yapÄ±yoruz.
   ğŸ‘‰ https://reactnavigation.org/docs/getting-started (navigation iÃ§in)
   ğŸ‘‰ https://github.com/axios/axios (API)
        -> npm install axios 
    
2. "Router", 3 adet temel yapÄ±da component(cityList, RestaurantList, RestaurantDetail) ve 1 index oluÅŸturuyoruz.

3. Router;
    import React from 'react';
    import { View, Text } from 'react-native';
    import { NavigationContainer } from '@react-navigation/native';
    import { createStackNavigator } from '@react-navigation/stack';

    const Router = () => {
        return (
            <NavigationContainer>
                <Stack.Navigator>
                    
                    <Stack.Screen/>
                    
                    <Stack.Screen/>
                    
                    <Stack.Screen/>
                
                </Stack.Navigator>
            </NavigationContainer>
        );
    };

    export default Router;

4. 3 tane sayfamÄ±zÄ±n temel yapÄ±larÄ±nÄ± oluÅŸturuyoruz;
    ex: RestaurantList
    import React from 'react';
    import { SafeAreaView, View, Text, FlatList } from 'react-native';

    const RestaurantList = (props) => {
        return (
            <SafeAreaView>
                <View>
                    <Text>Restaurant List</Text>
                </View>
            </SafeAreaView>
        )
    }

    export { RestaurantList };  

5. index oluÅŸturalÄ±m;
    export * from './CityList';
    export * from './RestaurantDetail';
    export * from './RestaurantList';


6. Router'a Stack yapÄ±sÄ±nÄ± kurup sayfalarÄ± tanÄ±mlÄ±yoruz;
    const Stack = createStackNavigator(); // createStackNavigator native-component'Ä±nÄ± kendi belirlediÄŸimi "Stack" deÄŸiÅŸkenine atÄ±yoruz

    import { CityList, RestaurantDetail, RestaurantList } from './pages'; //oluÅŸturduÄŸumuz sayfalarÄ± index'ten Ã§aÄŸÄ±rÄ±yoruz.

    ... 
                <Stack.Screen  //Stack'i yeni sayfalar(Screen'lar) oluÅŸturmak iÃ§in kullanÄ±yoruz.
                    name="Cities"  //Stack.Screen 2 param alÄ±r. *name, *component
                    component={CityList}  //hangi component'a ait oldugunu gÃ¶steriyor.
                    options={{ headerShown: false }} 
                />
                <Stack.Screen
                    name="Restaurants"
                    component={RestaurantDetail}
                    options={{ headerShown: false }}
                />
                <Stack.Screen
                    name="Details"
                    component={RestaurantList}
                    options={{ headerShown: false }}
                />
    ...
    
7. sayfalarÄ± hazÄ±rlayalÄ±m. Ã¶nce "CityList"

8. CityList;
    import axios from 'axios'; //API Ã§ekeceÄŸiz 
    import React, { useState, useEffect } from 'react'; //useState->Ã§ektiÄŸimiz verileri listede tutacaÄŸÄ±z.  useEffect->uygulama aÃ§Ä±lÄ±r aÃ§Ä±lmaz ilk Ã§alÄ±ÅŸacak fonk.
    import { SafeAreaView, View, Text, FlatList } from 'react-native';


    const CityList = (props) => {
        const [cityList, setCityList] = useState([]); // 1. verileri tutacaÄŸÄ±mÄ±z cityList'i oluÅŸturalÄ±m

        const fetchCityData = async () => {   //2. fetchCityData fonk ile verileri async ve await(verilerin gelmesini bekleyerek) olarak Ã§ekeceÄŸiz
            const { data } = await axios.get("https://opentable.herokuapp.com/api/cities") //6. verileri "response.data" diyerek de alabilirdik. fakat biz parÃ§alayarrak aldÄ±k.
            console.log(data); //4. Ã§ekeceÄŸiz veriler kontrol ettiÄŸimizde "data" nesnesinin geldiÄŸini gÃ¶rdÃ¼k. 
            setCityList(data.cities); //5. "data" bize  verileri 'count' ve 'cities' olarak gÃ¶nderiyor.
        }

        useEffect(() => {    //3. veri Ã§aÄŸÄ±rma iÅŸlemini hemen uygulama baÅŸladÄ±ÄŸÄ±nda yapmak iÃ§in
            fetchCityData();
        }, [])

        const renderCities = ({ item }) => <Text>{item}</Text> 
        //9. yeni bir deÄŸiÅŸken ile fonk tanÄ±mlÄ±yoruz. buraya aÅŸaÄŸÄ±da FlatList ile gÃ¶sterilecek ve 
        yukarÄ±dan axios ile Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±z "data.cities" ve gelen item'Ä±n propertileirni yazÄ±yoruz.
        bu Ã¶rnek Ã¶zelinde data'nÄ±n sadece cities nesnesi olduÄŸu iÃ§in ve onu yukarÄ±da Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±z iÃ§in
        sadece {item} yazÄ±yoruz

        return (
            <SafeAreaView>
                <View>
                    <FlatList //7. Ã§ektiÄŸimiz listeyi FlatList ile gÃ¶steriyoruz. FlatList 3 prop alÄ±yor. 
                        keyExtractor={(_, index) => index.toString()} 
                        data={cityList} //8. datayÄ± "useState" ile oluÅŸturduÄŸumuz deÄŸiÅŸkenden 
                        renderItem={renderCities} //10. component lerimizi render etmek iÃ§in kullanacaÄŸÄ±z 
                    />
                </View>
            </SafeAreaView>
            )
        }

     export { CityList };

9. ÅŸehirlerimizi componentlar Ã¼zerinden gÃ¶stereceÄŸimiz iÃ§in "component" klasÃ¶rÃ¼nÃ¼ iÃ§ine de 
    "CityItem.js" i  oluÅŸturuyoruz. ÅŸehirlerimizi listelemek iÃ§in kullanacaÄŸÄ±z.

10. CityItem;
    import React from 'react';
    import { TouchableOpacity, Text } from 'react-native';

    const CityItem = (props) => {
        return (
            <TouchableOpacity>
                <Text>{props.CityName}</Text> //1. bu prop ile buadan yakalayacaÄŸÄ±z.
            </TouchableOpacity>

        )
    }

    export { CityItem };

11. CityItem'Ä± export edebilmek iÃ§in aynÄ± klasÃ¶re "index.js" oluÅŸturalÄ±m.
    export * from './CityItem';

12. CityList;
    import {CityItem} from '../components';

    ğŸ‘‰const renderCities = ({ item }) => <Text>{item}</Text> 
    // deÄŸiÅŸtiriyoruz. artÄ±k yeni ve style verdiÄŸimiz yeni bir component'dan aldÄ±ÄŸÄ±mÄ±z listeyi 
        ekrana yansÄ±tacaÄŸÄ±z
    ğŸ‘‰const renderCities = ({ item }) => <CityItem cityName={item}/> 
    //yukarÄ±da oluÅŸturduÄŸumuz cityName prop'u ile Ã§aÄŸÄ±rÄ±yoruz. artÄ±k listemiz Touchable oldu.

13. CityItem'a biraz style verelim;
    ...
    return (
        <TouchableOpacity style={styles.container}>
            <Text style={styles.text}>{props.cityName}</Text>
        </TouchableOpacity>
            )}
    ...
    const styles = StyleSheet.create({
    container: {
        padding: 5,
        alignItems: 'center'
    },
    text: {
        fontSize: 20,
        fontWeight: '300'
    },
    })

14. component'a 1 adet searchbar oluÅŸturalÄ±m;
    import React from 'react';
    import { View, TextInput } from 'react-native';

    const SearchBar = (props) => {
        return (
            null
        )
    }

    export { SearchBar };

15. index'den export edelim;
    export * from './SearchBar';

16. cityList'e gidip FlatList'in hemen Ã¼zerinde SearchBar component'Ä±mÄ±zÄ± ekleyelim.;
    import { CityItem, SearchBar } from '../components';
    ....
    return (
        <SafeAreaView>
            <View>
                <SearchBar />
    ....

17. searchbar'a style verelim;
    ...
    const styles = StyleSheet.create({
    container: {
        backgroundColor: '#8d8d8d',
        margin: 5,
        padding: 1,
        borderRadius: 15,
    }
    })

18. ben burdan (SearchBar) prop alacam ve prop gÃ¶nderecÄŸim.;
    const SearchBar = (props) => {
        return (
            <View style={styles.container}>
                <TextInput
                    placeholder={props.placeholder} //1. placeholder'a girilecek default'u props ile gÃ¶ndereceÄŸim
                    onChangeText={(value) => props.onSearch(value)} 
                    //2. onChangeText ile girelen her harfi (value) onSearch'a yardÄ±mÄ±yla props'a atamasÄ±nÄ± yaptÄ±k
                />
            </View>
        )
    }

19. CityList->SearchBar'a geldik. propslara atamasÄ±nÄ± yaptÄ±ÄŸÄ±mÄ±z datalarÄ± kullanacaÄŸÄ±z;
     ...
     return (
        <SafeAreaView>
            <View>
                <SearchBar
                    placeholder="...Search a City..."
                    onSearch={(value) => consele.log(value)} //SearchBar->onSearch'dan gelen deÄŸiÅŸken
                />
    ...

20. 
    let originalList=[]

    const CityList = (props) => {
        ...

-----------

    function searchCity(search) {
        const filteredCities = originalList.filter(city=>{
            const text = search.toUpperCase();
            const cityName = city.toUpperCase();
            
            return cityName.indexOf(text) > -1;
        })
    }

-------------

    <SearchBar
                    placeholder="...Search a City..."
                    onSearch={(value) => searchCity(value)}
                />

--------------

    function searchCity(search) {
       ...
        })

        setCityList(filteredCities)
    }

---------------

     const fetchCityData = async () => {
        ...
        originalList=[...data.cities];
    }
    
